name: PR Multi-Model Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:  # Allow manual trigger for testing

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: self-hosted
    if: github.event.pull_request.draft == false  # Skip draft PRs
    env:
      TEST_CMD: ${{ vars.TEST_CMD || 'pytest tests/' }}
      REVIEW_TIMEOUT: ${{ vars.REVIEW_TIMEOUT || '120' }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '.review-pipeline/package-lock.json'

      - name: Setup Review Pipeline
        run: |
          cd .review-pipeline
          ./setup.sh

      - name: Run Review
        timeout-minutes: 5
        run: |
          # Use the review pipeline
          cd .review-pipeline
          
          # Build context
          mkdir -p workspace/context
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            gh pr view ${{ github.event.pull_request.number }} \
              --json number,state,headRefName,baseRefName,headRefOid,permalink,author \
              --repo "${{ github.repository }}" > workspace/context/pr.json
            
            gh pr diff ${{ github.event.pull_request.number }} --patch \
              --repo "${{ github.repository }}" > workspace/context/diff.patch
            
            gh pr view ${{ github.event.pull_request.number }} --json files \
              --repo "${{ github.repository }}" | jq -r '.files[].path' > workspace/context/files.txt
          fi
          
          # Run tests if configured
          if [ -n "${TEST_CMD}" ]; then
            cd ..
            echo "\$ ${TEST_CMD}" > .review-pipeline/workspace/context/tests.txt
            ${TEST_CMD} >> .review-pipeline/workspace/context/tests.txt 2>&1 || true
            echo "== exit:$? ==" >> .review-pipeline/workspace/context/tests.txt
            cd .review-pipeline
          fi
          
          # Run the review
          bash scripts/review-local.sh

      - name: Post Results
        if: always() && github.event.pull_request.number != ''
        run: |
          if [ -f .review-pipeline/workspace/summary.md ]; then
            gh pr comment ${{ github.event.pull_request.number }} \
              --body-file .review-pipeline/workspace/summary.md \
              --repo "${{ github.repository }}"
          fi

      - name: Gate Check
        run: |
          if [ -f .review-pipeline/workspace/gate.txt ]; then
            gate_status="$(cat .review-pipeline/workspace/gate.txt)"
            echo "Gate status: $gate_status"
            if [ "$gate_status" = "fail" ]; then
              echo "::error::Review gate failed - must-fix issues found"
              exit 1
            fi
          fi